name: Working Firebase Distribution

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_notes:
        description: 'Release Notes'
        required: false
        default: 'New build with latest features'

permissions:
  contents: write

jobs:
  build-and-distribute:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: Get Flutter dependencies
      run: flutter pub get
      
    - name: Build Android APK (Release)
      run: |
        flutter build apk --release \
          --dart-define=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
          --dart-define=ELEVENLABS_API_KEY="${{ secrets.ELEVENLABS_API_KEY }}"
      
    - name: Setup Service Account
      run: |
        echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}' > service-account.json
        
    - name: Get Access Token  
      id: auth
      run: |
        pip install google-auth google-auth-oauthlib google-auth-httplib2
        python3 -c "
        import json
        from google.oauth2 import service_account
        from google.auth.transport.requests import Request
        
        # Load service account and get access token
        with open('service-account.json') as f:
            service_account_info = json.load(f)
        
        credentials = service_account.Credentials.from_service_account_info(
            service_account_info,
            scopes=['https://www.googleapis.com/auth/cloud-platform']
        )
        
        credentials.refresh(Request())
        import os
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f'token={credentials.token}\n')
        print('✅ Access token obtained successfully')
        "
        
    - name: Upload to Firebase App Distribution
      run: |
        echo "🔍 Debug Info:"
        echo "App ID: ${{ secrets.FIREBASE_APP_ID }}"
        echo "APK file size: $(stat -c%s build/app/outputs/flutter-apk/app-release.apk) bytes"
        token_length=$(echo -n "${{ steps.auth.outputs.token }}" | wc -c)
        echo "Access token length: $token_length characters"
        
        echo "📤 Uploading APK to Firebase App Distribution..."
        response=$(curl -w "\n%{http_code}" -X POST \
          "https://firebaseappdistribution.googleapis.com/v1/projects/homecoming-74f73/apps/${{ secrets.FIREBASE_APP_ID }}/releases" \
          -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" \
          -H "Content-Type: application/octet-stream" \
          -H "X-Goog-Upload-File-Name: app-release.apk" \
          -H "X-Goog-Upload-Protocol: raw" \
          --data-binary @build/app/outputs/flutter-apk/app-release.apk)
        
        echo "📋 Firebase API Response:"
        echo "$response"
        
        http_code=$(echo "$response" | tail -n1)
        if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
          echo "✅ Successfully uploaded to Firebase App Distribution!"
          
          # Extract release name from response
          release_name=$(echo "$response" | head -n -1 | jq -r '.name // empty')
          if [ -n "$release_name" ]; then
            echo "📤 Distributing to testers group..."
            
            # Distribute to testers group
            distribute_response=$(curl -w "\n%{http_code}" -X PATCH \
              "https://firebaseappdistribution.googleapis.com/v1/$release_name" \
              -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" \
              -H "Content-Type: application/json" \
              -d '{
                "displayVersion": "Build #${{ github.run_number }}",
                "releaseNotes": {
                  "text": "🤖 Homecoming AI Avatar - Build #${{ github.run_number }}\n\n📅 Built: ${{ github.event.head_commit.timestamp }}\n🔧 Latest updates with AI features"
                }
              }')
            
            echo "📋 Distribution Response:"
            echo "$distribute_response"
            
            # Distribute to testers group
            group_response=$(curl -w "\n%{http_code}" -X POST \
              "https://firebaseappdistribution.googleapis.com/v1/$release_name:distribute" \
              -H "Authorization: Bearer ${{ steps.auth.outputs.token }}" \
              -H "Content-Type: application/json" \
              -d '{
                "testerEmails": [],
                "groupAliases": ["testers"]
              }')
            
            echo "📱 Testers Distribution Response:"
            echo "$group_response"
            echo "✅ APK distributed to testers group!"
          else
            echo "⚠️ Could not extract release name from response"
          fi
        else
          echo "❌ Upload failed with HTTP code: $http_code"
          exit 1
        fi
          
    - name: Upload APK as artifact
      uses: actions/upload-artifact@v4
      with:
        name: homecoming-release-apk
        path: build/app/outputs/flutter-apk/app-release.apk
        
    - name: Create GitHub Release
      if: github.event_name == 'push'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.run_number }}
        name: Homecoming AI Avatar v${{ github.run_number }}
        body: |
          🚀 **Homecoming AI Avatar** - Automated Release
          
          📱 **Firebase Distribution**: APK distributed to testers
          📅 **Build Date**: ${{ github.event.head_commit.timestamp }}
          🔧 **Commit**: ${{ github.sha }}
          
          ## ✨ What's New
          ${{ github.event.inputs.release_notes || 'Latest updates and improvements' }}
          
          Download from Firebase App Distribution or GitHub Releases.
        files: build/app/outputs/flutter-apk/app-release.apk
        draft: false
        prerelease: false