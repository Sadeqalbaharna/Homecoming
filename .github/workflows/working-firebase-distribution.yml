name: Working Firebase Distribution

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_notes:
        description: 'Release Notes'
        required: false
        default: 'New build with latest features'

permissions:
  contents: write

jobs:
  build-and-distribute:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true
        
    - name: Get Flutter dependencies
      run: flutter pub get
      
    - name: Build Android APK (Release)
      run: |
        flutter build apk --release \
          -t lib/main_mobile.dart \
          --dart-define=OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
          --dart-define=ELEVENLABS_API_KEY="${{ secrets.ELEVENLABS_API_KEY }}"
      
    - name: Setup Service Account
      run: |
        echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}' > service-account.json
        
    - name: Get Access Token  
      id: auth
      run: |
        pip install google-auth google-auth-oauthlib google-auth-httplib2
        python3 -c "
        import json
        from google.oauth2 import service_account
        from google.auth.transport.requests import Request
        
        # Load service account and get access token
        with open('service-account.json') as f:
            service_account_info = json.load(f)
        
        credentials = service_account.Credentials.from_service_account_info(
            service_account_info,
            scopes=['https://www.googleapis.com/auth/cloud-platform']
        )
        
        credentials.refresh(Request())
        import os
        with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f'token={credentials.token}\n')
        print('‚úÖ Access token obtained successfully')
        "
        
    - name: Upload to Firebase App Distribution
      run: |
        echo "üîç Debug Info:"
        echo "App ID: ${{ secrets.FIREBASE_APP_ID }}"
        echo "Expected App ID: 1:632366966739:android:351bee9e47901e29ac3126"
        echo "App ID Match: $([ '${{ secrets.FIREBASE_APP_ID }}' = '1:632366966739:android:351bee9e47901e29ac3126' ] && echo 'YES' || echo 'NO')"
        echo "APK file size: $(stat -c%s build/app/outputs/flutter-apk/app-release.apk) bytes"
        token_length=$(echo -n "${{ steps.auth.outputs.token }}" | wc -c)
        echo "Access token length: $token_length characters"
        
        echo "üì§ Installing Firebase CLI and using service account authentication..."
        npm install -g firebase-tools
        
        echo "üîë Setting up Firebase authentication with service account..."
        export GOOGLE_APPLICATION_CREDENTIALS=service-account.json
        
        echo "ÔøΩ Uploading APK using Firebase CLI..."
        firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk \
          --app ${{ secrets.FIREBASE_APP_ID }} \
          --groups testers \
          --release-notes "ü§ñ Homecoming AI Avatar - Build #${{ github.run_number }} - Latest updates with AI features" \
          --debug
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Successfully distributed APK to Firebase App Distribution!"
          echo "ÔøΩ Testers should receive notifications shortly!"
        else
          echo "‚ùå Firebase CLI distribution failed"
          exit 1
        fi
          
    - name: Upload APK as artifact
      uses: actions/upload-artifact@v4
      with:
        name: homecoming-release-apk
        path: build/app/outputs/flutter-apk/app-release.apk
        
    - name: Create GitHub Release
      if: github.event_name == 'push'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ github.run_number }}
        name: Homecoming AI Avatar v${{ github.run_number }}
        body: |
          üöÄ **Homecoming AI Avatar** - Automated Release
          
          üì± **Firebase Distribution**: APK distributed to testers
          üìÖ **Build Date**: ${{ github.event.head_commit.timestamp }}
          üîß **Commit**: ${{ github.sha }}
          
          ## ‚ú® What's New
          ${{ github.event.inputs.release_notes || 'Latest updates and improvements' }}
          
          Download from Firebase App Distribution or GitHub Releases.
        files: build/app/outputs/flutter-apk/app-release.apk
        draft: false
        prerelease: false